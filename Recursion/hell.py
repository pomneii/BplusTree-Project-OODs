
"""
    ต้นไม้แห่งกามภูมิ หรือ งิ้ว 

    จากหนังสือไตรภูมิกถาได้บรรยายถึงต้นไม้แห่งกามภูมิแห่งนรกภูมิไว้ว่า
    “…ฝูงคนอันทำชู้ด้วยเมียท่านก็ดี แลผู้หญิงอันมีผัวแล้วแลทำชู้จากผัวก็ดี คนฝูงนั้นตายไปเกิดในนรกนั้น นรกนั้นมีป่างิ้วป่าหนึ่งหลายต้นนักแล ต้นงิ้วนั้นต้นสูงได้ต้นแลโยชน์ 
    แลหนามงิ้วนั้นเทียรย่อมเหล็กแดงเป็นเปลวลุกอยู่ แลหนามงิ้วนั้นยาวได้ 10 นิ้วมือ เป็นเปลวไฟลุกอยู่บ่ห่อนจะรู้ดับสักคาบแล... ฝูงยมบาลก็เอาหอกดาบหลาวแหลนอันคมเทียรย่อมเหล็กแดงแทงตีนผู้ชาย 
    จำให้ขึ้นไปหาผู้หญิงว่าชู้สูอยู่บนปลายงิ้วโพ้น เร็ว อย่าอยู่ แลฝูงชายนั้นทนเจ็บบ่มิได้ จึงปีนขึ้นไปบนต้นงิ้วนั้น ครั้นว่าปีนขึ้นไปได้ หนามงิ้วนั้นบาดทั่วตนเขาขาดทุกแห่ง แล้วเป็นเปลวไฟไหม้ตนเขา...”

    หากท่านที่ได้โจทย์นี้ ถือว่าท่านยังมีบุญ ก่อนที่ยมทูตจะพาตัวนักศึกษาไปลงนรก ยมทูตได้ทำโจทย์นี้ออกมา เพื่อให้คนที่มีบุญสัมพันธ์ได้รอด และช่วยให้ผ่านการทนทุกข์ทรมานในขุมนรกได้เร็วขึ้น 
    นั้นก็คือการให้นักศึกษาฝึกซ้อมซ้อมปีนต้นงิ้วเอาไว้นั้นเอง ซึ่งหากปีนถึงยอดต้นงิ้วก็ถือว่ารอดจากขุมนรกนี้ได้สำเร็จ ทำให้นักศึกษารำลึกเอาไว้ว่า หากเจอในสถานการณ์จริงจะได้ปีนได้เร็ว 
    และหลุดพ้นจากขุมนรกแห่งนี้ได้เขาก่อนไครนั้นเอง เพราะโจทย์ของยมทูตข้อนี้นั้นเอง

    ลักษณะการปีน

    โดยต้นงิ้วที่นักศึกษาจะปีน จะถูกแบ่งเป็นข้อๆ โดยแต่ละข้อจะมีหนามให้จับและปีนขึ้นไป 
    (โดยให้ถือว่าข้อเเรกของต้นไม้อยู่เหนือหัวของนักศึกษาที่จะปีน และถือว่าถ้าถึงข้อสุดท้ายถือว่าปีนผ่านสำเร็จ)
    แต่ต้นงิ้วก็ไม่ใช่ง่ายที่จะปีนขึ้นไปให้สำเร็จ เพราะจะมีบางข้อที่จะมีหนามที่ยาวจนเกินไป ทำให้ยากที่จะปีนขึ้น ทำให้นักศึกษาจะต้องเอื้อมมือไปจับหนามในข้อต่อๆไป ซึ่งมนุษย์เราจะเอื้อมไปจับข้อของต้นไม้เหนือหัวเราได้สูงสุดแค่ 3 ข้อ (1, 2 และ 3 ข้อเท่านั้น)
    เช่นเดียวกันนี้เป็นแค่การฝึก เพราะฉนั้นมนุษย์ย่อมมีอาการเหนื่อยได้หากปีนขึ้นต้นไม้ และจะยิ่งเหนื่อยเพิ่มมากขึ้นหาก ต้องเอื้อมไปจับข้อต้นไม้ที่ยิ่งอยู่สูงขึ้นไป ซึ่งมนุษย์ก็มีขีดจำกัดเช่นกัน ทำให้หากพลังงานหมดก่อนจะถือว่าปีนต้นไม้นั้นไม่สำเร็จนั้นเอง
    
    สิ่งที่นักศึกษาต้องทำ

    รับ input ของข้อต้นไม้ทั้งหมดที่ต้นงิ้วมี (ไม่รับจำนวนทศนิยม และเป็นค่าติดลบไม่ได้)
    รับ input ของข้อต้นไม้ทั้งหมดที่มีหนามที่ยาวเกินไปเป็นอุปสรรค (ไม่รับจำนวนทศนิยม และเป็นค่าติดลบไม่ได้)
    หากไม่มีหนามจะระบุ 0
    รับ input ของพลังงานทั้งหมดที่นักศึกษาคนนั้นๆมี (รับจำนวนทศนิยมได้ และเป็นค่าติดลบไม่ได้)
    รับ input ของพลังงานในแต่ละข้อที่มนุษย์สามารถเอื้อมถึงได้ (พลังงานของ 1, 2 และ 3 ข้อ), (รับจำนวนทศนิยมได้ และเป็นค่าติดลบไม่ได้)
    หาก input มาจำนวน 3 ค่า จะเรียงตามข้อ
    หาก input มาจำนวน 2 ค่า จะเรียงกำหนดให้ข้อ 1,2 แต่ข้อที่ 3 กำหนดเป็น 0
    หาก input มาจำนวน 1 ค่า จะกำหนดให้ทุกข้อเป็นค่าค่านั้น
    แสดง output วิธีทั้งหมดที่จะสามารถรอดจากขุมนรกแห่งนี้ได้

    ตัวอย่าง
    Input :
    Creating a simulated hell scenario : 5/2/6.5/1.5,2.5,3.5
    อธิบาย input:
    5 	หมายถึง ต้นงิ้วต้นนี้มีทั้งหมด 5 ข้อ
    2	หมายถึง อุปสรรคหนามแหลมอยู่ข้อที่ 2 
    6.5	หมายถึง นักศึกษาคนนั้นๆมีพลังงานทั้งหมด 6.5 จูล

    1.5,2.5,3.5	หมายถึง พลังงานที่ต้องใช้ในการเอื้อมไปยังต้นไม้ข้อแรกคือ 1.5 จูล,  พลังงานที่ต้องใช้ในการเอื้อมไปยังต้นไม้ข้อที่ 2 คือ 2.5 จูล และพลังงานที่ต้องใช้ในการเอื้อมไปยังต้นไม้ข้อที่ 3 คือ 3.5 จูล ตามลำดับ

    Output :
    The ways to escape is/are 4 ways
    อธิบาย output:

    วิธีการปีนขึ้นต้นงิ้วให้สำเร็จมีทั้งหมด 4 วิธีนั้นเอง นั้นคือ (1 = ข้อที่ 1)

    วิธีที่ 1:	0->1->3->4->5 (ข้ามข้อที่ 2 เอื้อม 1,2,1,1 เอื้อม), 
    ใช้พลังงานทั้งหมด 1.5+2.5+1.5+1.5 = 7 (เกินพลังงานรวม (6.5) จึงตัดทิ้ง

    วิธีที่ 2:	0->1->3->5 (ข้ามข้อที่ 2 เอื้อม 1, 2, 2 ตามลำดับ), 
    ใช้พลังงานทั้งหมด 1.5+2.5+2.5 = 6.5

    วิธีที่ 3:	0->1->4->5 (ข้ามข้อที่ 2 เอื้อม 1, 3, 1 ตามลำดับ), 
    ใช้พลังงานทั้งหมด 1.5+3.5+1.5 = 6.5

    วิธีที่ 4:	0->3->4->5 (ข้ามข้อที่ 2 เอื้อม 3, 1, 1 ตามลำดับ),
    ใช้พลังงานทั้งหมด 3.5+1.5+1.5 = 6.5

    วิธีที่ 5:	0->3->5 (ข้ามข้อที่ 2 เอื้อม 3, 2 ตามลำดับ),
    ใช้พลังงานทั้งหมด 3.5+2.5 = 6

    ตอบ 4 วิธีนั้นเอง

    เนื่องจากโจทย์ค่อนข้างสับสน ยมทูตจึงใจดีมอบคำใบ้ให้ดังนี้ “การปีนต้นงิ้วก็เหมือนกับการขึ้น… มันเหนื่อยเช่นเดียวกัน” โดยโจทย์ข้อนี้ไม่ได้กำหนด parameter ตายตัว 
    นักศึกษาสามารถทำรูปแบบใดก็ได้ แต่อย่างน้อยต้องเป็น recursive เพราะยมทูตรู้ดีว่า "หากนักศึกษาตกนรกขึ้นมาจริงๆ นักศึกษาก็จะติดอยู่ในวังวน recursive(กรรม) เช่นเดียวกัน"

    Creating a simulated hell scenario: 5/2/6.5/1.5,2.5,3.5
    Height: 5
    thorn At: ['2']
    Max Tiredness: 6.5
    Tiredness Values: {1: 1.5, 2: 2.5, 3: 3.5}
    --------------------------------------------------
    The ways to escape is/are 4 ways
"""

def arrangeInput(inp) :
    inp = inp.split('/')
    height = int(inp[0])
    if inp[1] == '0' :   # no thorn
        thornsAt = []
        thornsAtForPrint = ['0']
    else :
        thornsAt = [int(e) for e in inp[1].split(',')]
        thornsAtForPrint = [e for e in inp[1].split(',')]
    maxEnergy = float(inp[2])
    thornsValues = [float(e) for e in inp[3].split(',')]

    if len(thornsValues) == 1 :
        energyCost = {1: thornsValues[0], 2: thornsValues[0], 3: thornsValues[0]}
    elif len(thornsValues) == 2 :
        energyCost = {1: thornsValues[0], 2: thornsValues[1], 3: 0}
    elif len(thornsValues) == 3 :
        energyCost = {1: thornsValues[0], 2: thornsValues[1], 3: thornsValues[2]}
        
    return height, thornsAt, maxEnergy, energyCost, thornsAtForPrint

def findPath(current, height, thornsAt, maxEnergy, thornsValues, currentEnergy, path, all_paths) :
    if current > height or current in thornsAt :
        return
    
    if current == height :
        all_paths.append((path, currentEnergy))

    for step in range(1, 4) :
        nexts_step = current + step
        if nexts_step <= height and nexts_step not in thornsAt :
            usedEnergy = currentEnergy + thornsValues[step]
            if usedEnergy <= maxEnergy :
                path.append(nexts_step)
                findPath(nexts_step, height, thornsAt, maxEnergy, thornsValues, usedEnergy, path, all_paths)

def escapeHelll(lst) :

    height, thornsAt, maxEnergy, energyCost, thornsAtForPrint = arrangeInput(lst)

    all_paths = []
    findPath(0, height, thornsAt, maxEnergy, energyCost, 0, [], all_paths)

    result = []
    for path, energy in all_paths :
        if energy <= maxEnergy :
            result.append(path)

    print(f"Height: {height}")
    print(f"thorn At: {thornsAtForPrint}")
    print(f"Max Tiredness: {maxEnergy}")
    print(f"Tiredness Values: {energyCost}")
    print("-" * 50)
    print(f"The ways to escape is/are {len(result)} ways")

inpList = input("Creating a simulated hell scenario: ")

escapeHelll(inpList)
