"""
    ให้น้องรับ input มา 2 อย่างโดยคั่นด้วย /

    1. ด้านซ้าย เป็นผลลัพธ์
    2. ด้านขวา เป็น list ของจำนวนเต็ม

    โดยผลลัพธ์ให้แสดงเป็น subset ของ input ด้านขวาที่มีผลรวมได้เท่ากับ input ด้านซ้าย และมี Pattern การแสดงผลลัพธ์ดังนี้

    1. ให้เรียงลำดับจากขนาดของ subset จากน้อยไปมาก
    2. ถ้าหาก subset มีขนาดเท่ากันให้เรียงลำดับจำนวนเต็มใน subset จากน้อยไปมาก

    ถ้าหากไม่มี subset ไหนที่ผลรวมเท่ากับ input ด้านซ้าย ให้แสดงว่า No Subset


    ****** ห้ามใช้ Built-in Function ที่เกี่ยวกับ Sort ให้น้องเขียนฟังก์ชัน Sort เอง และห้าม Import

    อธิบาย Test Case 1:

    [2]
    [-1, 3]
    [0, 2]  # [-1, 3] กับ [0, 2] มีขนาดเท่ากัน แต่ -1 < 0 ดังนั้น [-1, 3] จึงแสดงผลก่อน [0, 2]
    [-3, 2, 3]
    [-2, 1, 3]
    [-1, 0, 3]
    [-1, 1, 2]
    [-3, 0, 2, 3]
    [-2, -1, 2, 3]
    [-2, 0, 1, 3]   # [-2, -1, 2, 3] กับ [-2, 0, 1, 3] มีขนาดและตัวแรกสุดเท่ากัน แต่ตัวที่สอง -1 < 0 ดังนั้น [-2, -1, 2, 3] จึงแสดงผลก่อน [-2, 0, 1, 3]
    [-1, 0, 1, 2]
    [-3, -1, 1, 2, 3]
    [-2, -1, 0, 2, 3]
    [-3, -1, 0, 1, 2, 3]

    Enter Input : 2/-2 3 1 -1 0 -3 2
    [2]
    [-1, 3]
    [0, 2]
    [-3, 2, 3]
    [-2, 1, 3]
    [-1, 0, 3]
    [-1, 1, 2]
    [-3, 0, 2, 3]
    [-2, -1, 2, 3]
    [-2, 0, 1, 3]
    [-1, 0, 1, 2]
    [-3, -1, 1, 2, 3]
    [-2, -1, 0, 2, 3]
    [-3, -1, 0, 1, 2, 3]

    Enter Input : 2/1 0 2 -1
    [2]
    [0, 2]
    [-1, 1, 2]
    [-1, 0, 1, 2]

    Enter Input : 3/-1 0 1 2
    [1, 2]
    [0, 1, 2]

    Enter Input : 5/1 2 3 4
    [1, 4]
    [2, 3]

    Enter Input : 4/-1 0 1 2
    No Subset

    Enter Input : 1/-5 -4 -3 -2 -1 0 1 2 3 4 5
    [1]
    [-4, 5]
    [-3, 4]
    [-2, 3]
    [-1, 2]
    [0, 1]
    [-5, 1, 5]
    [-5, 2, 4]
    [-4, 0, 5]
    [-4, 1, 4]
    [-4, 2, 3]
    [-3, -1, 5]
    [-3, 0, 4]
    [-3, 1, 3]
    [-2, -1, 4]
    [-2, 0, 3]
    [-2, 1, 2]
    [-1, 0, 2]
    [-5, -3, 4, 5]
    [-5, -2, 3, 5]
    [-5, -1, 2, 5]
    [-5, -1, 3, 4]
    [-5, 0, 1, 5]
    [-5, 0, 2, 4]
    [-5, 1, 2, 3]
    [-4, -3, 3, 5]
    [-4, -2, 2, 5]
    [-4, -2, 3, 4]
    [-4, -1, 1, 5]
    [-4, -1, 2, 4]
    [-4, 0, 1, 4]
    [-4, 0, 2, 3]
    [-3, -2, 1, 5]
    [-3, -2, 2, 4]
    [-3, -1, 0, 5]
    [-3, -1, 1, 4]
    [-3, -1, 2, 3]
    [-3, 0, 1, 3]
    [-2, -1, 0, 4]
    [-2, -1, 1, 3]
    [-2, 0, 1, 2]
    [-5, -4, 1, 4, 5]
    [-5, -4, 2, 3, 5]
    [-5, -3, 0, 4, 5]
    [-5, -3, 1, 3, 5]
    [-5, -3, 2, 3, 4]
    [-5, -2, -1, 4, 5]
    [-5, -2, 0, 3, 5]
    [-5, -2, 1, 2, 5]
    [-5, -2, 1, 3, 4]
    [-5, -1, 0, 2, 5]
    [-5, -1, 0, 3, 4]
    [-5, -1, 1, 2, 4]
    [-5, 0, 1, 2, 3]
    [-4, -3, -1, 4, 5]
    [-4, -3, 0, 3, 5]
    [-4, -3, 1, 2, 5]
    [-4, -3, 1, 3, 4]
    [-4, -2, -1, 3, 5]
    [-4, -2, 0, 2, 5]
    [-4, -2, 0, 3, 4]
    [-4, -2, 1, 2, 4]
    [-4, -1, 0, 1, 5]
    [-4, -1, 0, 2, 4]
    [-4, -1, 1, 2, 3]
    [-3, -2, -1, 2, 5]
    [-3, -2, -1, 3, 4]
    [-3, -2, 0, 1, 5]
    [-3, -2, 0, 2, 4]
    [-3, -2, 1, 2, 3]
    [-3, -1, 0, 1, 4]
    [-3, -1, 0, 2, 3]
    [-2, -1, 0, 1, 3]
    [-5, -4, -2, 3, 4, 5]
    [-5, -4, -1, 2, 4, 5]
    [-5, -4, 0, 1, 4, 5]
    [-5, -4, 0, 2, 3, 5]
    [-5, -4, 1, 2, 3, 4]
    [-5, -3, -2, 2, 4, 5]
    [-5, -3, -1, 1, 4, 5]
    [-5, -3, -1, 2, 3, 5]
    [-5, -3, 0, 1, 3, 5]
    [-5, -3, 0, 2, 3, 4]
    [-5, -2, -1, 0, 4, 5]
    [-5, -2, -1, 1, 3, 5]
    [-5, -2, -1, 2, 3, 4]
    [-5, -2, 0, 1, 2, 5]
    [-5, -2, 0, 1, 3, 4]
    [-5, -1, 0, 1, 2, 4]
    [-4, -3, -2, 1, 4, 5]
    [-4, -3, -2, 2, 3, 5]
    [-4, -3, -1, 0, 4, 5]
    [-4, -3, -1, 1, 3, 5]
    [-4, -3, -1, 2, 3, 4]
    [-4, -3, 0, 1, 2, 5]
    [-4, -3, 0, 1, 3, 4]
    [-4, -2, -1, 0, 3, 5]
    [-4, -2, -1, 1, 2, 5]
    [-4, -2, -1, 1, 3, 4]
    [-4, -2, 0, 1, 2, 4]
    [-4, -1, 0, 1, 2, 3]
    [-3, -2, -1, 0, 2, 5]
    [-3, -2, -1, 0, 3, 4]
    [-3, -2, -1, 1, 2, 4]
    [-3, -2, 0, 1, 2, 3]
    [-5, -4, -3, 1, 3, 4, 5]
    [-5, -4, -2, 0, 3, 4, 5]
    [-5, -4, -2, 1, 2, 4, 5]
    [-5, -4, -1, 0, 2, 4, 5]
    [-5, -4, -1, 1, 2, 3, 5]
    [-5, -4, 0, 1, 2, 3, 4]
    [-5, -3, -2, -1, 3, 4, 5]
    [-5, -3, -2, 0, 2, 4, 5]
    [-5, -3, -2, 1, 2, 3, 5]
    [-5, -3, -1, 0, 1, 4, 5]
    [-5, -3, -1, 0, 2, 3, 5]
    [-5, -3, -1, 1, 2, 3, 4]
    [-5, -2, -1, 0, 1, 3, 5]
    [-5, -2, -1, 0, 2, 3, 4]
    [-4, -3, -2, -1, 2, 4, 5]
    [-4, -3, -2, 0, 1, 4, 5]
    [-4, -3, -2, 0, 2, 3, 5]
    [-4, -3, -2, 1, 2, 3, 4]
    [-4, -3, -1, 0, 1, 3, 5]
    [-4, -3, -1, 0, 2, 3, 4]
    [-4, -2, -1, 0, 1, 2, 5]
    [-4, -2, -1, 0, 1, 3, 4]
    [-3, -2, -1, 0, 1, 2, 4]
    [-5, -4, -3, -1, 2, 3, 4, 5]
    [-5, -4, -3, 0, 1, 3, 4, 5]
    [-5, -4, -2, -1, 1, 3, 4, 5]
    [-5, -4, -2, 0, 1, 2, 4, 5]
    [-5, -4, -1, 0, 1, 2, 3, 5]
    [-5, -3, -2, -1, 0, 3, 4, 5]
    [-5, -3, -2, -1, 1, 2, 4, 5]
    [-5, -3, -2, 0, 1, 2, 3, 5]
    [-5, -3, -1, 0, 1, 2, 3, 4]
    [-4, -3, -2, -1, 0, 2, 4, 5]
    [-4, -3, -2, -1, 1, 2, 3, 5]
    [-4, -3, -2, 0, 1, 2, 3, 4]
    [-5, -4, -3, -2, 1, 2, 3, 4, 5]
    [-5, -4, -3, -1, 0, 2, 3, 4, 5]
    [-5, -4, -2, -1, 0, 1, 3, 4, 5]
    [-5, -3, -2, -1, 0, 1, 2, 4, 5]
    [-4, -3, -2, -1, 0, 1, 2, 3, 5]
    [-5, -4, -3, -2, 0, 1, 2, 3, 4, 5]
"""

def sort_in_list(lst) :
    for last in range(len(lst) - 1, 0, -1) :
        swapped = False
        for i in range(last) :
            if lst[i] > lst[i + 1] :
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                swapped = True
        if not swapped :
            break
    return lst

def find_subset(lst, target, start = 0, current_subset = None, current_sum = 0, result = None) :
    if current_subset == None :
        current_subset = []
    if result == None :
        result = []

    # if sum = target add it in result list
    if current_sum == target :
        result.append(current_subset[:])

    # combination of number
    for i in range(start, len(lst)) :
        current_subset.append(lst[i])
        find_subset(lst, target, i + 1, current_subset, current_sum + lst[i], result)
        current_subset.pop()  # pop number in the last for backtrack

    return result

# order each subset
def sort_subset_recursive(subsets, last) :
    if last <= 0 :
        return

    swapped = False
    for i in range(last) :
        if len(subsets[i]) > len(subsets[i + 1]) :
            subsets[i], subsets[i + 1] = subsets[i + 1], subsets[i]
            swapped = True
        elif len(subsets[i]) == len(subsets[i + 1]) :  
            for j in range(len(subsets[i])) :
                if subsets[i][j] > subsets[i + 1][j] : 
                    subsets[i], subsets[i + 1] = subsets[i + 1], subsets[i]
                    swapped = True
                    break
                elif subsets[i][j] < subsets[i + 1][j] :
                    break

    if swapped :
        sort_subset_recursive(subsets, last - 1)

def sort_subset(target, lst) :
    subsets = find_subset(lst, target)
    if not subsets:
        print("No Subset")
        return

    # sort each list
    for subset in subsets:
        sort_in_list(subset)

    # sort by the len of list
    sort_subset_recursive(subsets, len(subsets) - 1)

    print('\n'.join(map(str, subsets)))

target, inp = input("Enter Input : ").split('/')
target = int(target)
inp = list(map(int, inp.split(' ')))
sort_subset(target, inp)
